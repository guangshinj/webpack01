export class MyPlugin {

  constructor() {
    this.startTime = Date.now();
    this.prevTimestamps = {};
    this.chunkVersions = {};
  }

  apply(compiler) {
    compiler.plugin('emit', function (compilation, callback) {

      // 检索每个（构建输出的）chunk：
      compilation.chunks.forEach(function (chunk) {
        // 检索 chunk 中（内置输入的）的每个模块：
        chunk.modules && chunk.modules.forEach(function (module) {
          console.info(`chunk:${chunk} module:${module} `)
          // 检索模块中包含的每个源文件路径：
          module.fileDependencies.forEach(function (filepath) {
            // 我们现在已经对源结构有不少了解……
            console.info(`filepath:${filepath}`)
          });
        });

        // 检索由 chunk 生成的每个资源(asset)文件名：
        chunk.files && chunk.files.forEach(function (filename) {
          // Get the asset source for each file generated by the chunk:
          var source = compilation.assets[filename].source();
          console.info(`filename:${filename} source 30 chars:${source.substring(0, 30)}`)
        });
      });

      var changedFiles = Object.keys(compilation.fileTimestamps).filter(function (watchfile) {
        return (this.prevTimestamps[watchfile] || this.startTime) < (compilation.fileTimestamps[watchfile] || Infinity);
      }.bind(this));

      console.info('changed files', changedFiles)

      this.prevTimestamps = compilation.fileTimestamps;

      var changedChunks = compilation.chunks.filter(function (chunk) {
        var oldVersion = this.chunkVersions[chunk.name];
        this.chunkVersions[chunk.name] = chunk.hash;
        return chunk.hash !== oldVersion;
      }.bind(this));
      console.info('changed chunks', changedChunks)

      callback();
    }.bind(this));
  }
}